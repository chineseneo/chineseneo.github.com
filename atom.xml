<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Place Holder's Life]]></title>
  <link href="http://chineseneo.github.io/atom.xml" rel="self"/>
  <link href="http://chineseneo.github.io/"/>
  <updated>2014-05-15T09:14:26+08:00</updated>
  <id>http://chineseneo.github.io/</id>
  <author>
    <name><![CDATA[Longkai CAO]]></name>
    <email><![CDATA[lkcao@thoughtworks.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git高级原理分析]]></title>
    <link href="http://chineseneo.github.io/blog/2014/01/14/gitgao-ji-yuan-li-fen-xi/"/>
    <updated>2014-01-14T14:05:00+08:00</updated>
    <id>http://chineseneo.github.io/blog/2014/01/14/gitgao-ji-yuan-li-fen-xi</id>
    <content type="html"><![CDATA[<h1>detached HEAD</h1>

<p>我们我们应该经常会使用<code>git checkout HEAD~n</code>这样的命令来查看历史的某一次提交，那么什么是HEAD呢？有人可能会说HEAD就是一个指向某个commit的reference，这种理解没错，但也不是全对。</p>

<p>如果你在一个git repo的根目录下执行命令<code>cat .git/HEAD</code>，得到的结果会有两种可能：</p>

<ul>
<li>一般情况下应该会得到形如<code>ref: refs/heads/master</code>的结果，也就是HEAD所指向的refs/heads目录下的master；</li>
<li>但是如果执行<code>cat</code>命令之前先使用<code>git checkout</code>提取某个commit，那么就会得到形如<code>93acc9c3279113af3fb492234169059811864801</code>的结果，也就是HEAD的指向是一个commit的hash。</li>
</ul>


<p>为什么会出现这样的结果？</p>

<p>其实HEAD最主要的功能在于追踪branch。每当一个新的git repo被创建出来的时候，都会产生一个HEAD，并且默认指向<code>ref: refs/heads/master</code>，即使这时候master还不存在。在这种情况下，如果连续commit的话，会发现你始终在master这个branch上面，也就是说，HEAD被attach在master上了。</p>

<p>那么，如果我们进行<code>git checkout HEAD~</code>这样的操作呢？试试上操作结束后，git会立即这样提醒：</p>

<pre><code>You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by performing another checkout.
</code></pre>

<p>这就是<code>detached HEAD</code>状态。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sleep locker]]></title>
    <link href="http://chineseneo.github.io/blog/2013/12/23/sleep-locker/"/>
    <updated>2013-12-23T20:45:00+08:00</updated>
    <id>http://chineseneo.github.io/blog/2013/12/23/sleep-locker</id>
    <content type="html"><![CDATA[<p>这是一个使用<a href="http://www.powtoon.com/">Powtoon</a>制作的动画演示短片。</p>

<iframe width="640" height="401" src="http://www.powtoon.com/embed/dIHjBSCdYRE/" frameborder="0"></iframe>


<p>Powtoon是一个非常强大的演示工具。使用他你可以创建很多很有意思的动画，来展示自己的想法。</p>

<p>有兴趣的话，快去试试吧！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[karma配置中的一些问题]]></title>
    <link href="http://chineseneo.github.io/blog/2013/12/19/shi-yong-karmapei-zhi-javascriptce-shi/"/>
    <updated>2013-12-19T23:31:00+08:00</updated>
    <id>http://chineseneo.github.io/blog/2013/12/19/shi-yong-karmapei-zhi-javascriptce-shi</id>
    <content type="html"><![CDATA[<p>之前看了<a href="www.icodeit.org">icodeit</a>的博客<a href="http://icodeit.org/2013/10/using-karma-as-the-javascript-test-runner/">使用Karma运行JavaScript测试</a>，试了一下karma，果然是非常好用。</p>

<p>关于使用karma基础流程，就请参照那篇博客。</p>

<p>这里主要针对我在配置karma的时候遇到的一些特殊问题进行一个总结。</p>

<h2>使用karma-html-reporter配置生成的html测试报告</h2>

<h4>配置</h4>

<p><code>package.json</code>中的内容：</p>

<pre><code>{
  "devDependencies": {
    "karma": "~0.10.8",
    "karma-html-reporter": "~0.1.1"
  }
}
</code></pre>

<p>执行<code>npm install</code>进行plugin的安装。</p>

<p>使用<code>./node_modules/.bin/karma init</code>初始化karma配置文件</p>

<p>然后打开<code>karma.conf.js</code>配置文件，添加html格式的report：</p>

<pre><code>reporters: ['progress', 'html'],

htmlReporter: {
  outputDir: 'report',
  templatePath: __dirname + '/jasmine_template.html'
},
</code></pre>

<h4>问题</h4>

<p>然而这时候启动karma</p>

<pre><code>./node_modules/.bin/karma start karma.conf.js
</code></pre>

<p>会报错：</p>

<pre><code>ERROR [karma]: { [Error: ENOENT, open '/Users/twer/learn/jasmine/jasmine_template.html']
  errno: 34,
  code: 'ENOENT',
  path: '/Users/twer/learn/jasmine/jasmine_template.html' }
Error: ENOENT, open '/Users/twer/learn/jasmine/jasmine_template.html'
</code></pre>

<h5>解决</h5>

<p>由于karma-html-reporter为了保持生成报告的灵活性，所以在生成html的时候使用了template。也就是配置中的这一句：</p>

<pre><code>  templatePath: __dirname + '/jasmine_template.html'
</code></pre>

<p>但是配置好的时候我们是没有自己的template    的，那要怎么办呢？
其实如果进入<code>node_modules/karma-html-reporter/</code>目录看一下的话，会发现这个目录下有一个叫<code>jasmine_template.html</code>的html文件。那如果我们将templatePath指向这个文件的话，会怎么样呢？</p>

<pre><code>  templatePath: 'node_modules/karma-html-reporter/jasmine_template.html'
</code></pre>

<p>然后重启karma服务器</p>

<pre><code>./node_modules/.bin/karma start karma.conf.js
</code></pre>

<p>会发现已经没有报错了，并且在<code>report</code>目录下，生成了一个新的目录，比如我的是<code>Chrome 31.0.1650 (Mac OS X 10.7.5)</code>。在这个目录下就会有我们生成的html报告了，打开看一下，会发现他的样式跟jasmine的SpecRunnerHtml结果是很像的，除了不能点链接。</p>

<p>到这里karma-html-reporter的配置就完成了。</p>

<h3>在karma里借助jasmine-jquery来使用external fixtures</h3>

<p>jasmine-jquery由于支持多种fixture的实现，所以被广泛的使用在jasmine测试中。
但是在karma中使用jasmine-jquery会存在一些配置的问题。</p>

<h4>配置</h4>

<p>首先要把jasmine-jquery的库文件放在files配置项里：</p>

<pre><code>files: [
  'src/**/*.js',
  'test/*.js',
  'test/lib/jquery-1.10.2.min.js',
  'test/lib/jasmine-fixture.min.js',
  'test/lib/jasmine-jquery.js'
],
</code></pre>

<p>在jasmine测试中使用jasmine-jquery的loadFixtures方法：</p>

<pre><code>jasmine.getFixtures().fixturesPath = path + 'fixtures';
loadFixtures('test_fixtures.html');
</code></pre>

<h4>问题</h4>

<p>那么在启动karma的时候会出现这样的错误：</p>

<pre><code>Chrome 31.0.1650 (Mac OS X 10.7.5) Firefox fixtures should work with imported html with jasmine-jquery FAILED
Error: Fixture could not be loaded: base/test/fixtures/test_fixtures.html (status: error, message: undefined)
    at Object.$.ajax.error (/Users/twer/learn/jasmine/test/lib/jasmine-jquery.js:130:17)
    at c (/Users/twer/learn/jasmine/test/lib/jquery-1.10.2.min.js:4:26036)
    at Object.p.fireWith (/Users/twer/learn/jasmine/test/lib/jquery-1.10.2.min.js:4:26840)
    at k (/Users/twer/learn/jasmine/test/lib/jquery-1.10.2.min.js:6:14283)
    at r (/Users/twer/learn/jasmine/test/lib/jquery-1.10.2.min.js:6:18646)
    at Object.send (/Users/twer/learn/jasmine/test/lib/jquery-1.10.2.min.js:6:18771)
    at Function.x.extend.ajax (/Users/twer/learn/jasmine/test/lib/jquery-1.10.2.min.js:6:13722)
    at jasmine.Fixtures.loadFixtureIntoCache_ (/Users/twer/learn/jasmine/test/lib/jasmine-jquery.js:122:21)
    at jasmine.Fixtures.getFixtureHtml_ (/Users/twer/learn/jasmine/test/lib/jasmine-jquery.js:114:12)
    at jasmine.Fixtures.read (/Users/twer/learn/jasmine/test/lib/jasmine-jquery.js:77:28)
</code></pre>

<h4>尝试</h4>

<p>看了一下jasmine-jquery的源码，发现在loadFixtures的时候调用了jquery里面的ajax方法。也就是说，当运行这段代码的时候，js会从浏览器中取出这个html文件，而不是从本地硬盘读取。</p>

<p>而karma的原理是借助于node.js启动了一个服务器，那么如果这个html文件不在服务器上的话，js是无法从浏览器里取出这个文件的。</p>

<p>那么我们首先让这个文件能在服务器上出现，把html文件假如files配置项：</p>

<pre><code>files: [
  'src/**/*.js',
  'test/*.js',
  'test/lib/jquery-1.10.2.min.js',
  'test/lib/jasmine-fixture.min.js',
  'test/lib/jasmine-jquery.js',
  {
    pattern: 'test/fixtures/**/*.html',
    watched: false,
    included: false
  }
],
</code></pre>

<p>这里稍微解释一下定义格式：每个定义的文件pattern都由三项属性：</p>

<ul>
<li>watched, 文件的修改是否被监控；</li>
<li>included, 文件是否是测试代码；</li>
<li>served，文件是否出现在服务器上。</li>
</ul>


<p>对于前面的字符串定义，其实是默认设置这三个属性为true的定义。那么其实我们的hmtl文件的修改不需要被监控，本身也不是测试代码，所以可以使用完整定义将这两项定义为false，只有文件是否出现在服务器上为true。</p>

<p>那么现在这个html文件应该可以被karma加载在服务器上了吧，重新运行karma，发现错误依旧。</p>

<h4>解决</h4>

<p>后来进行了大量搜索，最后在这个karma的<a href="https://github.com/karma-runner/karma/issues/788">github issue</a>里找到了答案。</p>

<p>所谓karma-html2js-preprocessor，是一个预处理器，会将files配置项中的html文件都转化成js文件，就拿karma-html2js-preprocessor主页上的一个例子来说：</p>

<p>有一个<code>test.html</code>，内容为</p>

<pre><code>&lt;div&gt;something&lt;/div&gt;
</code></pre>

<p>会被转化为一个js文件<code>template.html.js</code>，内容为</p>

<pre><code>window.__html__ = window.__html__ || {};
window.__html__['template.html'] = '&lt;div&gt;something&lt;/div&gt;';
</code></pre>

<p>而且这个preprocessor会被默认加载，所以其实我们在前面写的pattern中的html文件已经全部变成js文件被karma加载了，这也是html文件在服务器上不能被找到的原因。</p>

<p>那么怎么让preprocessor不做这样的转化呢？我们需要在增加一条配置：</p>

<pre><code>preprocessors: {
  '**/*.html': []
},
</code></pre>

<p>然后再重启karma服务器，就会发现一切正常了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress blog setup]]></title>
    <link href="http://chineseneo.github.io/blog/2013/09/16/octopress-setup/"/>
    <updated>2013-09-16T11:59:00+08:00</updated>
    <id>http://chineseneo.github.io/blog/2013/09/16/octopress-setup</id>
    <content type="html"><![CDATA[<h2>workflow of setting up octopress</h2>

<p><img src="http://chineseneo.github.io/images/octopress_work_flow.png" alt="normal blog workflow" /></p>

<h2>setup local environment</h2>

<ol>
<li>install git: <a href="http://git-scm.com">http://git-scm.com</a></li>
<li>install ruby: <a href="https://www.ruby-lang.org/en/downloads/">https://www.ruby-lang.org/en/downloads/</a></li>
</ol>


<h2>clone octopress repository</h2>

<pre><code>git clone git://github.com/imathis/octopress.git
</code></pre>

<h2>setup local octopress blog</h2>

<pre><code>cd octopress
gem install bundler
bundle install
rake install
</code></pre>

<h2>preview local octopress blog</h2>

<pre><code>rake preview
</code></pre>

<p>then you can view the blog with url <a href="http://localhost:4000">http://localhost:4000</a>.</p>

<h2>change some configuration</h2>

<p>open the file <code>_config.yml</code> and edit following lines:</p>

<ul>
<li>url: the url of the website(which will not be used in the local environment)</li>
<li>title: the title that will displayed on homepage</li>
<li>subtitle: the subtitle that will be displayed below the title</li>
<li>author: your name or nickname</li>
</ul>


<h2>write a new post</h2>

<pre><code>rake new_post["how to setup octopress blog"]
</code></pre>

<p>and checkout what has happened to your blog</p>

<p>then edit the md file that is generated.</p>

<h2>deploy your octopress blog</h2>

<h3>web server</h3>

<ul>
<li>create a new git repository with the username.github.io as the name</li>
</ul>


<h3>setup octopress to deploy to right place</h3>

<pre><code>rake setup_github_pages
</code></pre>

<p>and input the repository url of your git pages repository</p>

<h3>generate website and deploy</h3>

<pre><code>rake generate
rake deploy
</code></pre>

<h3>save changes</h3>

<pre><code>git add .
git commit -m "your commit message"
git push origin source
</code></pre>

<h2>third party plugins</h2>

<h3>github profile</h3>

<p>edit the file <code>_config.yml</code> to contain:</p>

<pre><code>github_user: chineseneo
</code></pre>

<h3>weibo link</h3>

<ul>
<li>generate the weibo link from <a href="http://app.weibo.com/tool/signature">http://app.weibo.com/tool/signature</a></li>
<li>create an html file in <code>source/_includes/asides/</code> directory, name it <code>weibo.html</code>. and put the weibo link in it</li>
<li>then edite <code>_config.yml</code> and add the following content to the key <code>default_asides</code></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>asides/weibo.html</span></code></pre></td></tr></table></div></figure>


<h2>references</h2>

<ul>
<li>octopress office setup instructions: <a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></li>
<li>What&rsquo;s jekyll? <a href="http://jekyllrb.com/">http://jekyllrb.com/</a></li>
<li>What&rsquo;s markdown? <a href="http://daringfireball.net/projects/markdown/">http://daringfireball.net/projects/markdown/</a></li>
</ul>


<h2>QR Code of this article</h2>

<p><img src="http://chineseneo.github.io/images/qrcode.17159653.png" alt="qrcode" /></p>
]]></content>
  </entry>
  
</feed>
